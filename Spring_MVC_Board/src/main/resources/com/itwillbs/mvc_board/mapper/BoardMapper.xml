<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.itwillbs.mvc_board.mapper.BoardMapper">

	<!-- 
	기존 게시물의 가장 큰 글 번호(board_num)를 조회하여 + 1 값을 새 글 번호로 설정 후 INSERT 해야함
	=> insert 태그 내에서 <selectKey> 태그를 사용하여 SELECT 구문 실행하고
	   조회된 결과값을 INSERT 구문에 반영 가능
	< 문법 >
	<insert>
		<selectKey keyProperty="값을 저장할 VO 객체 변수명" resultType="조회 결과 타입" order="실행 시점">
			실행할 SELECT 구문
		</selectKey>
		=> keyProperty : 조회 데이터를 저장할 VO 객체의 실제 변수명(나중에 #{변수명} 으로 사용)
		=> resultType : SELECT 구문 실행 시 기대되는 조회결과(리턴값)의 타입		
		=> order : 해당 SELECT 구문을 실행할 시점
		           BEFORE 는 INSERT 구문 실행 전 SELECT 구문 실행
		           AFTER 는 INSERT 구문 실행 후 SELECT 구문 실행
	</insert>
	-->
	
	<insert id="insertBoard">
		<selectKey keyProperty="board_num" resultType="integer" order="BEFORE">
			SELECT MAX(board_num) FROM board
		</selectKey>
		INSERT INTO board
		VALUES (
			 #{board_num} + 1,
	         #{board_name},
	         #{board_pass},
	         #{board_subject},
	         #{board_content},
	         '파일',
	         '파일',
	         #{board_num} + 1,
	         0,
	         0,
	         0,
	         now()
		)
	</insert>
	
	<!-- 게시물 목록 조회 -->
	<!-- 	<select id="selectBoardList" resultType="com.itwillbs.mvc_board.vo.BoardVO"> -->
	<!-- 		SELECT *  -->
	<!-- 			FROM board -->
	<!-- 			ORDER BY -->
	<!-- 				board_re_ref DESC, -->
	<!-- 				board_re_seq ASC -->
	<!-- 			LIMIT #{startRow}, #{listLimit} -->
	<!-- 	</select> -->
	
	<!-- 전체 게시물 목록 갯수 조회(검색 기능 추가) -->
	<select id="selectBoardList" resultType="com.itwillbs.mvc_board.vo.BoardVO">
		SELECT *
		FROM board
		<!-- choose, when, otherwise 태그를 사용하여 복수개의 조건 판별(if ~ else if 문 구조) -->
		<!-- 1. 검색어(keyword)가 널스트링이 아닐 때 검색 수행 -->
		<if test="!keyword.equals('')">
			<!-- 2. 검색타입(search)에 따른 WHERE 변경 -->
			<!-- 
			주의! #{} 는 주로 파라미터 데이터 표시 용도로 사용하며 문자열의 경우 자동으로 따옴표 붙음 
			반면, ${} 는 주로 컬럼명 등의 데이터가 아닌 용도로 사용하며 자동으로 따옴표 붙지 않음
			(#{} 은 SQL 삽입 공격 방지 대책으로 사용되므로 데이터(파라미터) 부분에 사용함)
			따라서, LIKE 절의 % 와 검색어 등을 조합해야할 경우 #{} 사용 시 %'#{데이터}'% 형식이 되므로
			#{} 대신 ${} 를 사용하여 직접 '%${데이터}%' 형태로 작은따옴표를 붙여서 표시해야한다!
			또는 CONCAT 함수를 통해 문자열 결합으로 사용해야한다!
			
			ex) WHERE board_subject LIKE '%${keyword}%'
			또는
			ex) WHERE board_subject LIKE CONCAT('%', #{keyword}, '%')
			-->
			<choose>
				<when test="searchType.equals('subject')">
					WHERE board_subject LIKE '%${keyword}%'
				</when>
				<when test="searchType.equals('content')">
					WHERE board_content LIKE '%${keyword}%'
				</when>
				<when test="searchType.equals('subject_content')">
					WHERE board_subject LIKE '%${keyword}%' OR board_content LIKE '%${keyword}%'
				</when>
				<when test="searchType.equals('name')">
					WHERE board_name LIKE '%${keyword}%'
				</when>
			</choose>
		</if>
		ORDER BY
			board_re_ref DESC, board_re_seq ASC
		LIMIT #{startRow}, #{listLimit}
	</select>
	
	<!-- 게시물 목록 조회 -->
	<!-- 	<select id="selectBoardList" resultType="com.itwillbs.mvc_board.vo.BoardVO"> -->
	<!-- 		SELECT *  -->
	<!-- 			FROM board -->
	<!-- 			ORDER BY -->
	<!-- 				board_re_ref DESC, -->
	<!-- 				board_re_seq ASC -->
	<!-- 			LIMIT #{startRow}, #{listLimit} -->
	<!-- 	</select> -->
	
	<select id="selectBoardListCount" resultType="integer">
		SELECT
			COUNT(*)
			FROM board
			<if test="!keyword.equals('')">
				<choose>
					<when test="searchType.equals('subject')">
						WHERE board_subject LIKE '%${keyword}%'
					</when>
					<when test="searchType.equals('content')">
						WHERE board_content LIKE '%${keyword}%'
					</when>
					<when test="searchType.equals('subject_content')">
						WHERE board_subject LIKE '%${keyword}%' OR board_content LIKE '%${keyword}%'
					</when>
					<when test="searchType.equals('name')">
						WHERE board_name LIKE '%${keyword}%'
					</when>
				</choose>
			</if>
	</select>
	
	<!-- 게시물 상세 정보 조회 -->
	<select id="selectBoard" resultType="com.itwillbs.mvc_board.vo.BoardVO">
		SELECT *
			FROM board
			WHERE board_num = #{board_num}
	</select>
	
	<!-- 게시물 조회수 증가 -->
	<update id="updateReadcount">
		UPDATE board
			SET
				board_readcount = board_readcount + 1
			WHERE
				board_num = #{board_num}
	</update>
	
	<!-- 게시물 삭제 -->
	<delete id="deleteBoard">
		DELETE
			FROM board
			WHERE
				board_num = #{board_num}
				AND
				board_pass = #{board_pass}
	</delete>
	
	<!-- 게시물 수정 -->
	<update id="updateBoard">
		UPDATE board
			SET
				board_name = #{board_name},
				board_subject = #{board_subject},
				board_content = #{board_content}
			WHERE
				board_num = #{board_num}
				AND
				board_pass = #{board_pass}
	</update>
	
	<!-- 
	답글 등록 - INSERT
	=> 단, INSERT 작업 실행 전 먼저 SELECT 구문을 통해 글번호(board_num) 의 최대값을 조회하여
	   INSERT 시 board_num 값을 조회결과 + 1 값으로 설정
	=> 또한, INSERT 과정에서 들여쓰기레벨(board_re_lev)과 순서번호(board_re_seq)는
	   전달받은 값 + 1 값을 사용
	-->
	<insert id="insertReplyBoard">
		<selectKey keyProperty="board_num" resultType="integer" order="BEFORE">
			SELECT MAX(board_num) FROM board
		</selectKey>
		INSERT INTO board
		VALUES (
			#{board_num} + 1,
			#{board_name},
			#{board_pass},
			#{board_subject},
			#{board_content},
			'파일',
			'파일',
			#{board_re_ref},
			#{board_re_lev} + 1,
			#{board_re_seq} + 1,
			0,
			now()
		)
			
	</insert>
	
	<!-- 
	답글 등록을 위한 게시물 순서번호(board_re_seq) 조정 - UPDATE
	=> 기존 답글들에 대한 순서번호 증가(UPDATE 구문 사용)
	=> 원본글의 참조글번호(board_re_ref)와 같은 레코드들 중에서
	   원본글의 순서번호 보다 큰 게시물들의 순서번호를 + 1 씩 처리
	-->
	<update id="updateBoardReSeq">
		UPDATE board
			SET
				board_re_seq = board_re_seq + 1
			WHERE
				board_re_ref = #{board_re_ref}
				AND
				board_re_seq > #{board_re_seq}
	</update>
	
</mapper>
