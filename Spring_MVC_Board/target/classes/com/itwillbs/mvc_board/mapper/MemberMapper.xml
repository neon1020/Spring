<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<!-- mapper 태그 내에 namespace 속성 지정 후 Mapper 인터페이스 위치 지정 -->
<mapper namespace="com.itwillbs.mvc_board.mapper.MemberMapper">

	<!-- 실행할 SQL 구문(쿼리)을 태그 형식으로 작성 (CRUD 작업에 해당하는 태그가 제공됨) -->
	<!-- 태그의 id 속성에 지정할 이름은 namespace 에서 지정한 인터페이스 내의 메소드명과 동일해야함 -->
	<!-- 각 태그 사이에 실제 쿼리문을 작성 -->
	<!-- 만능문자 파라미터 는 ? 기호 대신 #{파라미터명} 형태로 지정(VO 객체의 변수명 활용) -->
	
	<!-- 1. 회원 가입 작업을 수행하기 위한 insert 태그 작성(id 는 MemberMapper 객체의 메소드명 사용) -->
	<!-- 주의! 구문 내의 만능문자 사용 위치에 #{파라미터명} 지정 시 파라미터명은 VO 객체의 변수명과 동일 -->

	<insert id="insertMember">
		INSERT INTO member
		VALUES (
			null,
			#{name},
			#{id},
			#{passwd},
			#{email},
			#{gender},
			now(),
			'N'
		)
	</insert>
	
	<!-- 
	2. 로그인 작업 수행을 위한 select 태그 작성
	=> MemberMapper 객체의 loginMember() 메소드명을 id 속성값으로 지정
	=> 사용할 파라미터는 해당 메소드에 전달된 파라미터 객체의 멤버변수명과 동일한 이름 지정
	=> 단, SELECT 태그는 조회 결과를 저장할 객체의 타입을 resultType 속성을 통해 지정해야함
	   주로, VO 클래스명 지정(사용자 정의 클래스의 경우 패키지명 포함)
	-->
	<select id="loginMember" resultType="com.itwillbs.mvc_board.vo.MemberVO">
		SELECT * FROM member
		WHERE id=#{id} AND passwd=#{passwd}
	</select>
	
	<!-- 
	3. 회원 정보 조회 수행을 위한 select 태그 작성
	=> MemberMapper 객체의 selectMemberInfo() 메소드명을 id 속성값으로 지정
	=> 파라미터는 메서드 전달된 파라미터 변수명과 동일한 이름 사용
	=> 결과 타입은 1개 레코드 정보를 저장할 MemberVO 타입 지정
	-->
	<select id="selectMemberInfo" resultType="com.itwillbs.mvc_board.vo.MemberVO">
		SELECT * FROM member
		WHERE id=#{id}
	</select>
	
	<!-- 
	4. 전체 회원 목록 조회 작업 수행을 위한 select 태그 작성 => selectMemberList
	=> 전체 데이터에 대한 resultType 이 아닌 각 레코드에 대한 타입을 resultType 으로 설정
	   (조회된 레코드가 복수개일 경우 자동으로 List<resultType명> 타입에 해당하는 객체 생성됨)
	=> 1명의 회원 정보가 MemberVO 에 저장되고, 전체가 List 에 저장되므로
	   List 타입 객체의 제네릭 타입으로 사용되는 MemberVO 타입을 resultType 으로 지정
	-->
	<select id="selectMemberList" resultType="com.itwillbs.mvc_board.vo.MemberVO">
		SELECT * FROM member
	</select>
	
	<!-- 
	5. 회원 삭제 작업 수행을 위한 delete 태그 작성 => deleteMember
	=> INSERT 작업과 동일
	-->
	<delete id="deleteMember">
		DELETE
			FROM member
			WHERE id=#{id}
	</delete>
	
	<!-- 
	6. 회원 정보 수정 작업 수행을 위한 update 태그 작성 => updateMember
	=> INSERT 작업과 동일
	=> 임시) 아이디와 기존 패스워드가 일치하는 레코드를 찾아 이름, 성별, 이메일, 새패스워드로 수정
	-->
	<!-- 	<update id="updateMember"> -->
	<!-- 		UPDATE member -->
	<!-- 			SET name = #{member.name}, -->
	<!-- 				gender = #{member.gender}, -->
	<!-- 				email = #{member.email}, -->
	<!-- 				passwd = #{newPasswd} -->
	<!-- 			WHERE id = #{member.id} AND passwd = #{member.passwd} -->
	<!-- 	</update> -->
	
	<!-- 	<update id="updateMember"> -->
	<!-- 		UPDATE member -->
	<!-- 			SET -->
	<!-- 				name = #{member.name}, -->
	<!-- 				gender = #{member.gender}, -->
	<!-- 				email = #{member.email} -->
	<!-- 				<if test="newPasswd != null and newPasswd != ''"> -->
	<!-- 					,passwd = #{newPasswd} -->
	<!-- 				</if> -->
	<!-- 			WHERE id = #{member.id} AND passwd = #{member.passwd} -->
	<!-- 	</update> -->
	
	<!-- 6번의 쿼리를 동적 쿼리로 변경하여 새 패스워드 존재 여부에 따라 새 패스워드 변경 여부 결정 -->
	<!-- 새 패스워드(newPasswd)가 존재할 경우(!= null) 패스워드 변경 항목 추가 -->
	<!-- 단일 if문 : <if test"조건식">실행할 쿼리</if> -->
	<!-- 	<update id="updateMember"> -->
	<!-- 		UPDATE member -->
	<!-- 			SET  -->
	<!-- 				name = #{member.name}, -->
	<!-- 				gender = #{member.gender}, -->
	<!-- 				email = #{member.email}, -->
	<!-- 				<if test="newPasswd != null and newPasswd != ''"> -->
	<!-- 					passwd = #{newPasswd} -->
	<!-- 				</if> -->
	<!-- 			WHERE  -->
	<!-- 				id = #{member.id} AND passwd = #{member.passwd} -->
	<!-- 	</update> -->
	
	<!-- 만약, 이름, 성별, 이메일, 새패스워드가 널스트링이 입력된다고 가정했을 때 각 항목 판별 -->
	<!-- 
	각 if 문들로 인해 콤마(,)가 SET 절의 마지막 항목에 포함될 수 있으므로
	trim 태그를 사용하여 SET 절에 포함되는 내용 중 마지막(suffix)에 오는 콤마(,)를 제거 
	-->
	<update id="updateMember">
		UPDATE member
			<trim prefix="SET" suffixOverrides=",">
				<if test="member.name != null and member.name != ''">
					name = #{member.name},
				</if>
				<if test="member.gender != null and member.gender != ''">
					gender = #{member.gender},
				</if>
				<if test="member.email != null and member.email != ''">
					email = #{member.email},
				</if>
				<if test="newPasswd != null and newPasswd != ''">
					passwd = #{newPasswd}
				</if>
			</trim>
			WHERE
				id = #{member.id} AND passwd = #{member.passwd}
	</update>
</mapper>
